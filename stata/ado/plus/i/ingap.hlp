{smcl}
{.-}
help for {cmd:ingap} {right:(SJ3-3: st0043)}
{.-}


{title:Insert gap or heading observations in a dataset before output by {help listtex}}

{p 8 27 2}
{cmd:ingap} [ {it:numlist} ]
 [ {cmd:if} {it:expression} ] [ {cmd:in} {it:range} ]
 [ , {cmdab:af:ter} {cmdab:g:apindicator}{cmd:(}{it:newvarname}{cmd:)}
   {cmdab:ro:wlabel}{cmd:(}{it:string_varname}{cmd:)} {cmdab:gr:owlabels}{cmd:(}{it:string_list}{cmd:)}
   {cmdab:rs:tring}{cmd:(}{it:string_replacement_option}{cmd:)} ]

{p 4 8 2}
where {it:numlist} is an optional list of integers, {it:string_list} is a list
of strings, and {it:string_replacement_option} can be {cmd:name}, {cmd:label}
or {cmd:labname}.

{p 4 8 2}
{cmd:by {it:varlist}:} may be used with {cmd:ingap}; see help for {help by}.


{title:Description}

{p 4 4 2}
{cmd:ingap} inserts gap and/or heading observations into a dataset in
preparation for outputting the dataset using the {help listtex} package
(downloadable from {help ssc:SSC}), which outputs the dataset in the form of
rows that can be inserted into a TeX, LaTeX, HTML, or Microsoft Word table.
{cmd:ingap} inserts a gap observation next to (before or after) each of a list
of observations specified by the {it:numlist}. A positive number {it:i} in the
{it:numlist} specifies the {it:i}th existing observation in the dataset, or in
each by-group if {cmd:by {it:varlist}:} is specified. A negative number
{it:-i} in the {it:numlist} specifies the {it:i}th existing observation, in
reverse order, from the end of the dataset, or from the end of each by-group
if {cmd:by {it:varlist}:} is specified.  A zero or out-of-range number in the
{it:numlist} is ignored. The {it:numlist} is set to 1 if not specified by the
user. {cmd:ingap} assumes that the dataset in memory has up to 3 classes of
variables.  These are the by-variables that define by-groups representing the
pages of the table, a row label variable containing the row labels in the left
margin of the table, and the remaining variables, which may form the entries
in the table rows. A gap observation inserted by {cmd:ingap} has the same
values for the by-variables as the observation next to which it was inserted,
a row label value specified by the corresponding string in the
{cmd:growlabels} list, and missing values (or possibly column headings) in the
remaining variables. {cmd:ingap} may also create an additional binary
variable, indicating which observations are gap observations.  The user may
then output the dataset using {help listtex} or, alternatively, create a plot
for immediate impact, using Stata graphics together with the {help sencode}
package (downloadable from {help ssc:SSC}). {help sencode} can be used to
encode the row label variable to a numeric variable, which can then be plotted
against other variables in the table.


{title:Options}

{p 4 8 2}{cmd:after} specifies that each gap observation will be inserted
after the corresponding existing observation in the dataset or by-group
specified in the {it:numlist}. If {cmd:after} is not specified, then each gap
observation will be inserted before the corresponding existing observation.

{p 4 8 2}{cmd:gapindicator(}{it:newvarname}{cmd:)} specifies the name of a new
variable to be generated, equal to 1 for the newly-inserted gap observations
and 0 for all other observations.

{p 4 8 2}{cmd:rowlabel(}{it:string_varname}{cmd:)} specifies the name of an
existing string variable, used as the row labels for a table whose rows are
the observations. In the gap observations, this string variable is set to the
value specified by the corresponding string listed in the {cmd:growlabels}
option if that option is specified (see below), or to a missing value
otherwise.  The {cmd:rowlabel} variable may not be a by-variable.

{p 4 8 2}{cmd:growlabels(}{it:string_list}{cmd:)} specifies a string value for
each of the row labels in the gap observations. The {it:j}th string in the
{it:string_list} is written to the {cmd:rowlabel} variable in the
newly-inserted  gap observation  inserted next to the {it:j}th observation
mentioned in the {it:numlist}. If the {cmd:rowlabel} option is present and the
{cmd:growlabel} option is absent, then the {cmd:rowlabel} variable is set to
missing in the gap observations.

{p 4 8 2}{cmd:rstring(}{it:string_replacement_option}{cmd:)} specifies a rule
for replacing the values of string variables (other than the by-variables and
row label variables)) in gap observations.  If {cmd:rstring} is set to
{cmd:name}, then string variables which are not by-variables or row label
variables are reset to their variable names in by-gap observations. If
{cmd:rstring} is set to {cmd:label}, then string variables that are not
by-variables or row label variables are set to their variable labels in by-gap
observations, or to missing values if their variable labels are missing.  If
{cmd:rstring} is set to {cmd:labname}, then string variables that are not
by-variables or row label variables are set to their variable labels in by-gap
observations, or to their variable names if their variable labels are missing.
If {cmd:rstring} is set to any other value, or not set, then string variables
that are not by-variables or row label variables are set to missing values.
(Note that numeric variables that are not by-variables are always set to
numeric missing values in gap observations.) The {cmd:rstring} option allows
the user to add a row of column headings to a dataset of string variables, or
to add a row of column headings to each by-group of a dataset of string
variables.  Note that numeric variables may be converted to string variables
using the {help tostring} package, written by Nicholas J. Cox and Jeremy
Wernow and downloadable from {help ssc:SSC}, before using {cmd:ingap} and
{help listtex}. This allows the user to use the {cmd:rstring} option, and also
to format numeric variables in ways not possible using Stata formats alone,
such as adding parentheses to confidence limits.


{title:Remarks}

{p 4 4 2}
{cmd:ingap} is used to convert a Stata dataset to a set of table rows.
The user can label these table gaps in the margin by using the {cmd:rowlabel}
and {cmd:growlabel} options, and/or insert column headings by using the {cmd:rstring} option.
The user can also modify the values of variables in the gap observations using {help replace},
using the {cmd:gapindicator} variable to identify gap observations.
The user can then list the dataset as a list of rows to be inserted into a TeX, LaTeX, HTML
or Microsoft Word table, using the {help listtex} package (downloadable from {help ssc:SSC}).
Alternatively, for immediate impact, the user can use the {help sencode} package
(downloadable from {help ssc:SSC}) to encode the row labels to a numeric variable,
and then plot this numeric variable against other variables using Stata graphics programs.
For instance, a user of Stata 8 or above might use {help eclplot} (downloadable from SSC)
to produce horizontal confidence interval plots, with the row labels on the vertical axis.
It is often advisable for the user to type {help preserve} before a sequence of commands including
{cmd:ingap}, and to type {help restore} after a sequence of commands using {cmd:ingap},
because {cmd:ingap} modifies the dataset by adding new observations. It is often also advisable
for the user to place the whole sequence of commands in a {help do:do-file}, and to execute
this {help do:do-file}, rather than to type the sequence of commands one by one at the terminal.


{title:Examples}

{p 8 16 2}{cmd:. ingap,g(toprow)}{p_end}

{p 8 16 2}{cmd:. ingap 1 53,g(toprow) row(make) grow("US cars" "Non-US cars")}{p_end}

{p 8 16 2}{cmd:. by foreign:ingap,g(gind) row(make) grow("Car model")}{p_end}

{p 8 16 2}{cmd:. sort foreign rep78 make}{p_end}
{p 8 16 2}{cmd:. by foreign rep78:ingap}{p_end}
{p 8 16 2}{cmd:. by foreign:ingap -1,after}{p_end}
{p 8 16 2}{cmd:. by foreign:ingap,row(make) grow("Car model")}{p_end}
{p 8 16 2}{cmd:. list}{p_end}

{p}
The following example works in the {hi:auto} data if the user has installed the {help listtex} package,
downloadable from {help ssc:SSC}. It outputs to the Results window a generic ampersand-delimited
text table, which can be cut and pasted into a Microsoft Word document, and then converted to
the rows of a table inside Microsoft Word, using the menu sequence {cmd:Table->Convert->Text to Table}.
(Note that the {help listtex} command can alternatively create table rows suitable for input into a
TeX, LaTeX or HTML file.)

{p 8 16 2}{cmd:. preserve}{p_end}
{p 8 16 2}{cmd:. ingap 1 53,row(make) grow("US cars" "Non-US cars")}{p_end}
{p 8 16 2}{cmd:. listtex make mpg weight,type}{p_end}
{p 8 16 2}{cmd:. restore}{p_end}

{p}
The following example works in the {hi:auto} data if the user has installed the {help listtex} package,
and also the {help tostring} package of Nicholas J. Cox and Jeremy Wernow. (Both of these packages
can be downloaded from {help ssc:SSC}.) It outputs to the Results window a generic ampersand-delimited
text table, which can be cut and pasted into a Microsoft Word document (as in the previous example),
and then converted into two tables, one for American cars and one for non-American cars, each with a title
line containing the variable labels in the {hi:auto} data. Note that, to do this, the user must
convert the numeric variables to string variables, and this is done using {help tostring}.

{p 8 16 2}{cmd:. preserve}{p_end}
{p 8 16 2}{cmd:. tostring mpg weight price,use}{p_end}
{p 8 16 2}{cmd:. by foreign:ingap,rstring(labname)}{p_end}
{p 8 16 2}{cmd:. listtex make mpg weight price,type}{p_end}
{p 8 16 2}{cmd:. restore}{p_end}

{p}
The following example works in the {hi:auto} data if the user has installed the {help sencode} package,
downloadable from {help ssc:SSC}. It produces a graph of mileage by car type (US or non-US) and
repair record.

{p 8 16 2}{cmd:. preserve}{p_end}
{p 8 16 2}{cmd:. gene str1 rowlab=""}{p_end}
{p 8 16 2}{cmd:. replace rowlab=string(rep78,"%2.0f")}{p_end}
{p 8 16 2}{cmd:. by foreign:ingap, gap(gapind)}{p_end}
{p 8 16 2}{cmd:. replace rowlab="US cars:" if (!foreign)&(gapind==1)}{p_end}
{p 8 16 2}{cmd:. replace rowlab="Others:" if (foreign)&(gapind==1)}{p_end}
{p 8 16 2}{cmd:. sencode rowlab,gene(row) many gs(foreign -gapind rep78)}{p_end}
{p 8 16 2}{cmd:. lab var row "Repair record"}{p_end}
{p 8 16 2}{cmd:. version 7:graph row mpg,yreverse ylab(1(1)12) yscale(0 13) xlab(0(10)50)}{p_end}
{p 8 16 2}{cmd:. restore}{p_end}


{title:Author}

{p 4 4 2}
Roger Newson, King's College, London, UK.
Email: {browse "mailto:roger.newson@kcl.ac.uk":roger.newson@kcl.ac.uk}


{title:Acknowledgment}

{p 4 4 2}
I would like to thank Nicholas J. Cox, of the University of Durham, U.K., for
writing the {help hplot} package, downloadable from {help ssc:SSC}. This
package gave me a lot of the ideas used in {cmd:ingap}, and was also my
preferred package for producing confidence interval plots under Stata Versions
6 and 7, before I had access to the improved graphics of Stata Version 8.


{title:Also see}

{p 4 19 2}Manual:  {hi:[U] 14.1.2 by varlist:},{break}
{hi:[U] 14.5 by varlist: construct},{break}
{hi:[U] 31.2 The by construct},{break} 
{hi:[R] by}, {hi:[R] expand}

{p 4 19 2}Online:  help for {help by}, {help byprog}, {help ssc}{p_end}
{p 13 19 2}help for {help listtex}, {help sencode}, {help tostring}, {help hplot}, {help eclplot} if installed
{p_end}
