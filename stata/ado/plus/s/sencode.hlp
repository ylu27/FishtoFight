{smcl}
{hline}
help for {cmd:sencode} {right:(Roger Newson)}
{hline}


{title:Encode string into numeric in a sequential or other non-alphanumeric order}

{p 8 15 2}{cmd:sencode} {it:varname} [{cmd:if} {it:exp}] [{cmd:in} {it:range}],
 {cmdab:g:enerate}{cmd:(}{it:newvar}{cmd:)}
 [ {cmdab:l:abel}{cmd:(}{it:name}{cmd:)} {cmdab:gs:ort}{cmd:(}{it:gsort_list}{cmd:)} {cmdab:man:yto1} ]

{p 4 8 2}
where {it:gsort_list} is a list of one or more elements of the form

{p 8 15 2}[{cmd:+}|{cmd:-}]{it:varname}

{p 4 8 2}
as used by the {help gsort} command.


{title:Description}

{p 4 4 2}
{cmd:sencode} ("sequential {help encode}") creates a new variable named
{it:newvar}, based on the string variable {it:varname}, creating, adding to,
or just using (as necessary) the value label {it:newvar}, or, if specified,
the value label {it:name}. Unlike {help encode}, {cmd:sencode} can order the
numeric values corresponding to the string values in a logical order, instead
of ordering them in alphanumeric order of the string value, as {help encode}
does.  This logical order defaults to the order of appearance of the string
values in the dataset, but may be an alternative order specified by the user
in the {cmd:gsort} option. The mapping of numeric code values to string values
may be one-to-one, so that each string value has a single numeric code, or
many-to-one, so that each string value may have multiple numeric codes,
corresponding to multiple appearances of the string value in the dataset.
{cmd:sencode} may be useful when the input string variable is used as a source
of axis labels in a {help graph:Stata graph} and the output numeric variable
is used as the {it:x}-variable or {it:y}-variable.


{title:Options}

{p 4 8 2}{cmd:generate(}{it:newvar}{cmd:)} is not optional. It specifies the name of the variable to be
created.

{p 4 8 2}{cmd:label(}{it:name}{cmd:)} is optional. It specifies the name of the value label to be
created or, if the named value label already exists, used and added to as
necessary.  If {cmd:label} is not specified, then {cmd:sencode} uses the same name for the
label as it uses for the new variable, as specified by {cmd:generate}.

{p 4 8 2}{cmd:gsort(}{it:gsort_list}{cmd:)} is optional.
It specifies a generalized sorting order for the allocation
of code numbers to the nonmissing values of the input string variable.
If the {cmd:gsort} option is not specified, then it is set
to the sequential order of the observation in the dataset.
The {it:gsort_list} is interpreted in the way used by the {help gsort} command.
Observations are grouped in ascending or descending order of the specified {it:varname}s.
Each {it:varname} in the {cmd:gsort} option can be numeric or string.
Observations are grouped in ascending order of {it:varname} if {cmd:+}
or nothing is typed in front of the name, and in descending order of {it:varname} if {cmd:-} is typed
in front of the name.
If there are multiple nonmissing values of the input string variable in a group specified by the {cmd:gsort}
option, then the group is split into subgroups, one subgroup for each nonmissing input string value,
and these subgroups are ordered alphanumerically within the group by the input string values.
If there are multiple groups with the same input string value, and the {cmd:manyto1} option
is not specified, then multiple groups with the same input string value are combined into the first
group with that input string value. The ordered groups are then allocated
integer code values, and these values are stored in the new variable named in the {cmd:generate} option.
Note that the dataset remains sorted in its original order, even if the user specifies the {cmd:gsort} option.

{p 4 8 2}{cmd:manyto1} is optional. It specifies that the mapping from the numeric codes to the
possible values of the input string variable {it:varname} may be many-to-one, so that
each string value may have multiple numeric codes, corresponding to multiple positions
of that string value in the dataset. These multiple positions may correspond to multiple observations
(if {cmd:gsort} is not specified), or to multiple groups of observations specified by {cmd:gsort}.
If {cmd:manyto1} is not specified, then each string value will have one numeric code,
and these numeric codes are usually ordered by the position of the first appearance of the string value
in the dataset.


{title:Technical note}

{p 4 4 2}
{cmd:sencode} encodes the string values in the string input variable as follows.
First, {cmd:sencode} selects observations in the dataset with nonmissing values of the input string variable.
If {cmd:if} and/or {cmd:in} is specified, then {cmd:sencode} selects the subset of those observations selected
by {cmd:if} and/or {cmd:in}. Then, these observations are grouped into ordered groups, ordered
primarily by the {cmd:gsort} option and secondarily by the value of the input string variable.
(If the {cmd:gsort} option is not specified, then it is set to a single temporary variable,
with values set to the expression {cmd:_n}, equal in each observation to the sequential order of
that observation in the dataset, and there is therefore only one observation per {cmd:gsort} group.)
Then, if {cmd:manyto1} is not specified, any set of multiple ordered groups with the same value of the
input string variable is combined into the first group in that set of groups.
Each of the ordered groups existing at this stage is then allocated an integer code value.
These integer code values are usually ordered primarily by the {cmd:gsort} option and secondarily by
the alphanumeric order of the input string variable. The code values are then stored in the new variable
specified by the {cmd:generate} option.

{p 4 4 2}
Usually, the code values range from one to the final number of groups. Exceptions arise when the
{help label:value label} implied by the {cmd:label} option of {cmd:sencode} is a pre-existing
{help label:value label}, with pre-existing associations between numeric code values and string labels
already defined. In this case, {cmd:sencode} does not modify existing associations.
The consequences of this policy depend on whether or not {cmd:manyto1} is specified.
If {cmd:manyto1} is not specified,
and the input string value of an ordered group has a pre-existing numeric code,
then that pre-existing numeric code continues to be used for that group,
and new numeric codes
are generated for any input string values without existing numeric codes.
If {cmd:manyto1} is specified, and there are existing associations, then a new numeric
code is generated for each ordered group,
whether or not the input string value for that ordered group has a pre-existing numeric code.
In both cases, newly-generated numeric codes are ordered by group, and are chosen to be greater than
the greatest pre-existing numeric code.

{p 4 4 2}
These features of {cmd:sencode} may cause problems. Fortunately, these problems can be avoided
if a value label name is specified (by the {cmd:label} option) to be different
from any pre-existing value label name, or if existing value labels are removed using
the {help label:label drop} or {help clear} commands.


{title:Examples}

{p 4 4 2}
If we type this example in the {hi:auto} data, then all US-made cars will be ordered before all
cars from the rest of the world, and each car type (US and non-US) will be ordered
alphanumerically. If we used {help encode} instead of {cmd:sencode}, then cars would be ordered
alphanumerically by make (so Audi cars would appear before Ford cars).

{p 8 16 2}{cmd:. sort foreign make}{p_end}
{p 8 16 2}{cmd:. sencode make,gene(makeseq)}{p_end}
{p 8 16 2}{cmd:. tab makeseq}{p_end}

{p 4 4 2}
If we type this in the {hi:auto} data, then a new variable {hi:origseq} will
created, with a value for each observation equal to the sequential order of
that observation in the dataset, and a value label for each value {it:i}
equal to the car origin type ({hi:Domestic} or {hi:Foreign}) for the {it:i}th
car.

{p 8 16 20}{cmd:. decode foreign,gene(orig)}{p_end}
{p 8 16 20}{cmd:. sencode orig,gene(origseq) many}{p_end}
{p 8 16 20}{cmd:. lab list origseq}{p_end}
{p 8 16 20}{cmd:. tab origseq}{p_end}
{p 8 16 20}{cmd:. list foreign origseq,nolab}{p_end}

{p 4 4 2}
If we type this in the {hi:auto} data, then we will encode {hi:make} so that
all non-US cars have lower codes than all US cars (so Volvo cars have lower codes than AMC cars),
but the data remain sorted as before:

{p 8 16 20}{cmd:. sencode make,gene(makeseq) gsort(-foreign)}{p_end}
{p 8 16 20}{cmd:. tab makeseq,m}{p_end}
{p 8 16 20}{cmd:. lab list makeseq}{p_end}
{p 8 16 20}{cmd:. list make makeseq,nolab}{p_end}


{title:Author}

{p 4 4 2}
Roger Newson, King's College, London, UK.
Email: {hi:roger.newson@kcl.ac.uk}


{title:Acknowledgment}

{p 4 4 2}
This program has benefitted from advice from Nicholas J. Cox, of the
University of Durham, U.K., who had some very helpful ideas for making the
code more efficient.


{title:Also see}

{p 4 19 2}Manual:  {hi:[U] 15.6.3 Value labels},{break}
          {hi:[U] 26.2 Categorical string variables},{break}
          {hi:[R] encode}, {hi:[R] gsort}

{p 4 19 2}Online:  help for {help encode}, {help compress}, {help generate}, {help label}, {help gsort}
{p_end}
